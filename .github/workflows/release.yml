name: Build new release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  # Gets the build version and information about if this is a new version
  get-version:
    name: Get version
    runs-on: ubuntu-latest
    outputs:
      is_new_version: ${{ steps.get_version.outputs.IS_NEW_VERSION }}
      version: ${{ steps.get_version.outputs.VERSION }}
      build_date: ${{ steps.get_version.outputs.BUILD_DATE }}
      is_prerelease: ${{ steps.get_version.outputs.IS_PRERELEASE }}
      toolchain: ${{ steps.get_toolchain.outputs.TOOLCHAIN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: git fetch --tags
      - run: pip3 install yq
      - name: Get Build Version
        id: get_version
        run: ./scripts/check-version.sh
        shell: bash
      - name: Get Toolchain Version
        id: get_toolchain
        run: |
          echo "##[set-output name=TOOLCHAIN;]$(cat rust-toolchain)"

  build-docker:
    name: Build Docker
    runs-on: ubuntu-latest
    needs: [get-version]

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        volumes:
          - "/tmp/sccache:/data"
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@master
    - name: Setup QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: linux/amd64
    - name: Setup Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        buildkitd-flags: --debug
        driver-opts: network=${{ job.services.redis.network }}
    - name: Generate tags
      id: generate-tags
      env:
        VERSION: ${{ needs.get-version.outputs.version }}
        IS_NEW_VERSION: ${{ needs.get-version.outputs.is_new_version }}
        IS_PRERELEASE: ${{ needs.get-version.outputs.is_prerelease }}
      # if it's a new non prerelease version tag with hash, version latest-dev and latest
      # if it's a new prerelease version tag with hash, version and latest-dev
      # if it's a non new version tag with hash and latest-dev
      run: |
        if [ "$IS_NEW_VERSION" == "true" ]; then
          echo "##[set-output name=VERSION_TAG;]ghcr.io/digicatapult/vitalam-node:$VERSION";
          if [ "$IS_PRERELEASE" == "false" ]; then
            echo "##[set-output name=LATEST_TAG;]ghcr.io/digicatapult/vitalam-node:latest";
          else
            echo "##[set-output name=LATEST_TAG;]";
          fi;
        else
          echo "##[set-output name=VERSION_TAG;]";
          echo "##[set-output name=LATEST_TAG;]";
        fi;
    - name: Stop Redis
      env:
        SERVICE_ID: ${{ job.services.redis.id }}
      run: |
        docker stop $SERVICE_ID
        sudo rm -rf /tmp/sccache
    - name: Cache Docker sccache
      uses: actions/cache@v2
      with:
        path: /tmp/sccache
        key: ${{ runner.os }}-docker-sccache-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-sccache-
    - name: Prepare Redis with cache
      timeout-minutes: 1
      id: prepare-redis
      env:
        SERVICE_ID: ${{ job.services.redis.id }}
        NETWORK: ${{ job.services.redis.network }}
      run: |
        docker start $SERVICE_ID
        while true; do
          echo "Sleeping for 5 seconds"
          sleep 5
          STATUS=$(/usr/bin/docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" $SERVICE_ID)
          echo $STATUS
          [[ "$STATUS" == "healthy" ]] && break
        done

        # github service containers don't support args. As a workaround we configure redis as a cache whilst running
        /usr/bin/docker run --network=$NETWORK redis redis-cli -h redis CONFIG SET maxmemory 500mb
        /usr/bin/docker run --network=$NETWORK redis redis-cli -h redis CONFIG SET maxmemory-policy allkeys-lru

        # get ip address of redis container
        ip=$(/usr/bin/docker container inspect --format="{{print .NetworkSettings.Networks.$NETWORK.IPAddress }}" $SERVICE_ID)
        echo "::set-output name=ip::$ip"
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build image
      uses: docker/build-push-action@v2
      with:
        load: true
        builder: ${{ steps.buildx.outputs.name }}
        cache-from: type=local,src=${{ runner.temp }}/docker-buildx-cache
        cache-to: type=local,dest=${{ runner.temp }}/docker-buildx-cache-temp,mode=max
        context: .
        build-args: |
          BUILD_BASE_VERSION=nightly-2021-11-09-alpine3.14
          BUILD_CONFIG_SCCACHE_LOCAL=
          BUILD_CONFIG_SCCACHE_REDIS=redis://${{ steps.prepare-redis.outputs.ip }}:6379
        file: ./Dockerfile
        platforms: linux/amd64
        tags: |
          ghcr.io/digicatapult/vitalam-node:${{ github.sha }}
          ghcr.io/digicatapult/vitalam-node:latest-dev
          ${{ steps.generate-tags.outputs.VERSION_TAG }}
          ${{ steps.generate-tags.outputs.LATEST_TAG }}
        labels: |
          org.opencontainers.image.title=vitalam-node
          org.opencontainers.image.description=${{ github.event.repository.description }}
          org.opencontainers.image.source=${{ github.event.repository.html_url }}
          org.opencontainers.image.url=${{ github.event.repository.html_url }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.version=${{ needs.get-version.outputs.version }}
          org.opencontainers.image.created=${{ needs.get-version.outputs.build_date }}
    - name: Publish image
      run: docker push --all-tags ghcr.io/digicatapult/vitalam-node
    # need sudo access to move from /var/lib/docker/buildkit/cache.db which is hopefully not going to change ðŸ¤ž
    - name: Flush Redis to disk
      env:
        NETWORK: ${{ job.services.redis.network }}
      run: |
        /usr/bin/docker run --network=$NETWORK redis redis-cli -h redis SAVE

  # Github releases are only performed when the release version changes
  build-release:
    name: Build release
    runs-on: ubuntu-latest
    needs: [build-docker, get-version]
    if: ${{ needs.get-version.outputs.is_new_version == 'true' }}

    steps:
      - uses: actions/checkout@master
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ needs.get-version.outputs.toolchain }}
          target: wasm32-unknown-unknown
      - name: Install sccache
        env:
          TEMP: ${{ runner.temp }}
        run: |
          curl -L https://github.com/gruntwork-io/fetch/releases/download/v0.3.7/fetch_linux_amd64 --output $TEMP/fetch
          chmod +x $TEMP/fetch
          $TEMP/fetch --repo="https://github.com/mozilla/sccache" --tag="~>0.2.15" --release-asset="^sccache-v[0-9.]*-x86_64-unknown-linux-musl.tar.gz$" $TEMP
          tar -xvf $TEMP/sccache-v*-x86_64-unknown-linux-musl.tar.gz -C $TEMP
          mv $TEMP/sccache-v*-x86_64-unknown-linux-musl/sccache $TEMP/sccache
          rm -rf $TEMP/sccache-v*-x86_64-unknown-linux-musl $TEMP/sccache-v*-x86_64-unknown-linux-musl.tar.gz $TEMP/fetch
          chmod +x $TEMP/sccache
      - name: Cache sccache
        uses: actions/cache@v2
        with:
          path: ${{ runner.temp }}/cache
          key: ${{ runner.os }}-cargo-build-cache-release-${{ needs.get-version.outputs.toolchain }}-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-cache-release-${{ needs.get-version.outputs.toolchain }}-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-build-cache-release-${{ needs.get-version.outputs.toolchain }}-
            ${{ runner.os }}-cargo-build-cache-release-
      - name: Cargo build
        uses: actions-rs/cargo@v1
        env:
          RUSTC_WRAPPER: ${{ runner.temp }}/sccache
          SCCACHE_DIR: ${{ runner.temp }}/cache
        with:
          command: build
          args: --release
      - name: Prepare artefacts
        env:
          BUILD_VERSION: ${{ needs.get-version.outputs.version }}
          TEMP: ${{ runner.temp }}
        run: |
          mkdir $TEMP/artefacts
          cp ./target/release/vitalam-node $TEMP/artefacts/vitalam-node
          echo $BUILD_VERSION | tee $TEMP/artefacts/VERSION.txt
          shasum -a 256 $TEMP/artefacts/vitalam-node | cut -d ' ' -f 1 | tee $TEMP/artefacts/vitalam-node.sha256
          pushd $TEMP/artefacts/
          tar -czvf vitalam-node-${BUILD_VERSION}-x86_64-unknown-linux-gnu.tar.gz ./VERSION.txt ./vitalam-node ./vitalam-node.sha256
          popd;
      - name: Build release version
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ needs.get-version.outputs.version }}
          title: Release ${{ needs.get-version.outputs.version }}
          prerelease: ${{ needs.get-version.outputs.is_prerelease == 'true' }}
          files: |
            ${{ runner.temp }}/artefacts/vitalam-node-${{ needs.get-version.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz
      - name: Build release latest
        if: ${{ needs.get-version.outputs.is_prerelease != 'true' }}
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: latest
          title: Latest Release ${{ needs.get-version.outputs.version }}
          prerelease: false
          files: |
            ${{ runner.temp }}/artefacts/vitalam-node-${{ needs.get-version.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz
